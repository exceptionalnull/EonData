Description: Creates the EonData.net website
Parameters:
    HostKeyPair:
        Description: The EC2 KeyPair to use when creating the bastion host instances.
        Type: AWS::EC2::KeyPair::KeyName
        Default: eondata-web
    EonDataWebAppBucketName:
        Description: Name of the S3 bucket that will host the angular webapp.
        Type: String
        Default: eondataweb
    EonDataWebDataBucketName:
        Description: Name of the S3 bucket that stores data used by the website.
        Type: String
        Default: eondataweb-data
    EonDataWebAppCertArn:
        Description: ARN of the certificate to use for the webapp. This needs to be deployed to us-east-1 to work with CloudFront.
        Type: String
    EonDataWebApiCertArn:
        Description: ARN of the certificate to use for the webapp. This needs to be deployed to us-east-1 to work with CloudFront.
        Type: String
    BastionSecurityGroupId:
        Description: The security group id the bastion host belongs to.
        Type: String
    TargetVPC:
        Description: VPC to launch the bastion host in.
        Type: AWS::EC2::VPC::Id
    WebHostInstanceType:
        Description: The EC2 instance type to use when creating the bastion host.
        Type: String
        Default: t4g.small
    WebHostSubnets:
        Description: The subnets to deploy the web host instances to. These should be private subnets.
        Type: List<AWS::EC2::Subnet::Id>
    # get the latest amazon linux 2 ami id
    LatestAmiId:
        Description: This is the latest Amazon Linux 2 AMI which will be used for the EC2 instances.
        Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
        Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
    EonDataWebAppS3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Ref EonDataWebAppBucketName
            AccessControl: PublicRead
            WebsiteConfiguration:
                IndexDocument: index.html
                ErrorDocument: index.html
    EonDataWebAppS3Policy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref EonDataWebAppS3Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Sid: "PublicReadGetObject"
                      Effect: "Allow"
                      Principal: "*"
                      Action: "s3:GetObject"
                      Resource: !Join ["", ["arn:aws:s3:::", !Ref EonDataWebAppBucketName, "/*"]]
    EonDataWebDataS3Bucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketName: !Ref EonDataWebDataBucketName
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
    EonDataWebAppCloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Enabled: true
                Comment: EonData web app distribution
                HttpVersion: http2
                Aliases:
                    - eondata.net
                    - www.eondata.net
                ViewerCertificate:
                    AcmCertificateArn: !Ref EonDataWebAppCertArn
                    SslSupportMethod: sni-only
                    MinimumProtocolVersion: TLSv1.2_2018
                DefaultRootObject: index.html
                Origins:
                    - Id: EonDataWebAppS3Origin
                      DomainName: !Sub ${EonDataWebAppBucketName}.s3.amazonaws.com
                      S3OriginConfig: {}
                    #     OriginAccessIdentity: ''
                    #   OriginCustomHeaders:
                    #     - HeaderName: Access-Control-Allow-Origin
                    #       HeaderValue: "'*'"
                      OriginPath: ''
                DefaultCacheBehavior:
                    TargetOriginId: EonDataWebAppS3Origin
                    ForwardedValues:
                        QueryString: false
                        Cookies:
                            Forward: none
                    ViewerProtocolPolicy: redirect-to-https
                    MinTTL: 0
                    AllowedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                    CachedMethods:
                        - GET
                        - HEAD
                    DefaultTTL: 3600
                    MaxTTL: 86400
                CustomErrorResponses:
                    - ErrorCode: 404
                      ResponsePagePath: /index.html
                      ResponseCode: '200'
                      ErrorCachingMinTTL: 300

    # EonDataWebApiCloudFrontDistribution:
    #     Type: AWS::CloudFront::Distribution
    #     Properties:
    #         DistributionConfig:

    # EonDataWebHostEC2Security:
    #     Type: AWS::EC2::SecurityGroup
    #     Properties:
    #       GroupName: EonDreamWebServerSecurityGroup
    #       GroupDescription: Controls access to the eondream website web ec2 servers.
    #       VpcId: !Ref TargetVPC
    # EonDataWebHostAllowSSH:
    #     Type: AWS::EC2::SecurityGroupIngress
    #     GroupId: !GetAtt EonDataWebHostEC2Security.GroupId