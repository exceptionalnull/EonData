Description: Creates the EonData.net website
Parameters:
    WebHostKeyPair:
        Description: The EC2 KeyPair to use when creating the web host instances.
        Type: AWS::EC2::KeyPair::KeyName
        Default: eondata-web
    EonDataWebAppBucketName:
        Description: Name of the S3 bucket that will host the angular webapp.
        Type: String
        Default: eondataweb
    EonDataWebDataBucketName:
        Description: Name of the S3 bucket that stores data used by the website.
        Type: String
        Default: eondataweb-data
    EonDataWebAppCertArn:
        Description: ARN of the certificate to use for the webapp. This needs to be deployed to us-east-1 to work with CloudFront.
        Type: String
    EonDataWebApiCertArn:
        Description: ARN of the certificate to use for the webapp. This needs to be deployed to us-east-1 to work with CloudFront.
        Type: String
    BastionSecurityGroupId:
        Description: The security group id the bastion host belongs to.
        Type: String
    TargetVPC:
        Description: VPC to launch the api host in.
        Type: AWS::EC2::VPC::Id
    WebHostInstanceType:
        Description: The EC2 instance type to use when creating the api host.
        Type: String
        Default: t3.small
    WebHostSubnets:
        Description: The subnets to deploy the web host instances to. These should be private subnets.
        Type: List<AWS::EC2::Subnet::Id>
    DnsHostedZoneId:
        Description: The DNS hosted zone this stack can use for new entries.
        Type: AWS::Route53::HostedZone::Id
    # get the latest amazon linux 2 ami id
    LatestAmiId:
        Description: This is the latest Amazon Linux 2 AMI which will be used for the EC2 instances.
        Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
        Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
    EonDataWebAppS3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Ref EonDataWebAppBucketName
            AccessControl: PublicRead
            WebsiteConfiguration:
                IndexDocument: index.html
                ErrorDocument: index.html
    EonDataWebAppS3Policy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref EonDataWebAppS3Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Sid: "PublicReadGetObject"
                      Effect: "Allow"
                      Principal:
                        AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${EonDataWebOriginAccess}
                      Action: "s3:GetObject"
                      Resource: !Join ["", ["arn:aws:s3:::", !Ref EonDataWebAppBucketName, "/*"]]
    EonDataWebDataS3Bucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketName: !Ref EonDataWebDataBucketName
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
    EonDataWebDataS3Policy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref EonDataWebDataS3Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Sid: WebAppCFLogs
                      Effect: Allow
                      Principal:
                        AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${EonDataWebOriginAccess}
                      Action:
                        - s3:GetBucketAcl
                        - s3:PutBucketAcl
                      Resource: !Sub arn:aws:s3:::${EonDataWebDataBucketName}
    EonDataWebAppCloudFrontRequests:
        Type: AWS::CloudFront::OriginRequestPolicy
        Properties:
            OriginRequestPolicyConfig:
                Name: EonDataWebAppCloudFrontRequests
                CookiesConfig:
                    CookieBehavior: none
                HeadersConfig:
                    HeaderBehavior: whitelist
                    Headers:
                        - Origin
                        - Referer
                        - Accept
                        - Accept-Language
                QueryStringsConfig:
                    QueryStringBehavior: all
    EonDataWebAppCloudFrontCaching:
        Type: AWS::CloudFront::CachePolicy
        Properties:
            CachePolicyConfig:
                Name: EonDataWebAppCloudFrontCaching
                DefaultTTL: 86400
                MaxTTL: 2592000
                MinTTL: 0
                ParametersInCacheKeyAndForwardedToOrigin:
                    CookiesConfig:
                        CookieBehavior: none
                    HeadersConfig:
                        HeaderBehavior: whitelist
                        Headers:
                            - Accept
                            - Accept-Language
                    QueryStringsConfig:
                        QueryStringBehavior: all
                    EnableAcceptEncodingGzip: true
    EonDataWebAppCloudFrontAssetCaching:
        Type: AWS::CloudFront::CachePolicy
        Properties:
            CachePolicyConfig:
                Name: EonDataWebAppCloudFrontAssetCaching
                DefaultTTL: 2592000
                MaxTTL: 31536000
                MinTTL: 86400
                ParametersInCacheKeyAndForwardedToOrigin:
                    CookiesConfig:
                        CookieBehavior: none
                    HeadersConfig:
                        HeaderBehavior: whitelist
                        Headers:
                            - Accept
                            - Accept-Language
                    QueryStringsConfig:
                        QueryStringBehavior: all
                    EnableAcceptEncodingGzip: true
    EonDataWebAppCloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Enabled: true
                Comment: EonData web app distribution
                HttpVersion: http2
                Aliases:
                    - www.eondata.net
                ViewerCertificate:
                    AcmCertificateArn: !Ref EonDataWebAppCertArn
                    SslSupportMethod: sni-only
                    MinimumProtocolVersion: TLSv1.2_2021
                DefaultRootObject: index.html
                Origins:
                    - Id: EonDataWebAppS3Origin
                      DomainName: !Sub ${EonDataWebAppBucketName}.s3.amazonaws.com
                      S3OriginConfig:
                        OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${EonDataWebOriginAccess}
                      OriginPath: ''
                DefaultCacheBehavior:
                    TargetOriginId: EonDataWebAppS3Origin
                    ViewerProtocolPolicy: redirect-to-https
                    CachePolicyId: !Ref EonDataWebAppCloudFrontCaching
                    OriginRequestPolicyId: !Ref EonDataWebAppCloudFrontRequests
                    AllowedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                CacheBehaviors:
                    - PathPattern: /assets/*
                      TargetOriginId: EonDataWebAppS3Origin
                      ViewerProtocolPolicy: redirect-to-https
                      CachePolicyId: !Ref EonDataWebAppCloudFrontAssetCaching
                      OriginRequestPolicyId: !Ref EonDataWebAppCloudFrontRequests
                      AllowedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                CustomErrorResponses:
                    - ErrorCode: 404
                      ResponsePagePath: /index.html
                      ResponseCode: '200'
                      ErrorCachingMinTTL: 300
                Logging:
                    Bucket: !Sub ${EonDataWebDataBucketName}.s3.amazonaws.com
                    Prefix: logs/webapp/cf/
                    IncludeCookies: false
    EonDataWebOriginAccess:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: EonData Web App CloudFront Origin
    EonDataWebLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: eondataweb
            RetentionInDays: 120
    EonDataApiHostEC2Security:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupName: EonDataApiHostEC2Security
          GroupDescription: Controls access to the eondream website web ec2 servers.
          VpcId: !Ref TargetVPC
    EonDataApiHostAllowAllHTTP:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Allow HTTP access from everywhere to the API server.
            GroupId: !GetAtt EonDataApiHostEC2Security.GroupId
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
    EonDataApiHostAllowBastionSSH:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Allows SSH access to the API hosts from the bastion server.
            GroupId: !GetAtt EonDataApiHostEC2Security.GroupId
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !Ref BastionSecurityGroupId
    EonDataApiHostLaunchTemplate:
        Type: AWS::EC2::LaunchTemplate
        Properties:
            LaunchTemplateName: EonDataApiHostTemplate
            LaunchTemplateData:
                ImageId: !Ref LatestAmiId
                InstanceInitiatedShutdownBehavior: terminate
                InstanceType: !Ref WebHostInstanceType
                IamInstanceProfile:
                    Arn: !GetAtt EonDataApiHostIAMProfile.Arn
                CreditSpecification:
                    CpuCredits: standard
                KeyName: !Ref WebHostKeyPair
                SecurityGroupIds:
                    - !Ref EonDataApiHostEC2Security
                UserData:
                  Fn::Base64: !Sub |
                    #!/bin/bash
                    yum update -y
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource EonDataApiHostLaunchTemplate --region ${AWS::Region} --configsets Setup
        Metadata:
            AWS::CloudFormation::Init:
                configSets:
                    Setup:
                      - init
                      - inst
                      - cfgs
                init:
                  # initialize environment and logging
                  packages:
                    yum:
                      awslogs: []
                      jq: []
                      htop: []
                  users:
                    eondata:
                      homeDir: /home/eondata
                  files:
                    /etc/awslogs/awscli.conf:
                        mode: "000400"
                        content: !Sub |
                            [plugins]
                            cwlogs = cwlogs
                            [default]
                            region = ${AWS::Region}
                    /etc/awslogs/awslogs.conf:
                        mode: "000400"
                        content: !Sub |
                            [general]
                            state_file = /var/lib/awslogs/agent-state
                            use_gzip_http_content_encoding = true
                            queue_size = 10

                            [cfn-init]
                            file = /var/log/cfn-init.log
                            log_group_name = ${EonDataWebLogGroup}
                            log_stream_name = api cfn-init {instance_id}
                            datetime_format = %Y-%m-%d %H:%M:%S,%f
                            time_zone = UTC
                            multi_line_start_pattern = {datetime_format}

                            [sshd]
                            file = /var/log/secure
                            log_group_name = ${EonDataWebLogGroup}
                            log_stream_name = api sshd {instance_id}
                            datetime_format = %b %d %H:%M:%S

                            [nginx_access]
                            file = /var/log/nginx/access.log
                            log_group_name = ${EonDataWebLogGroup}
                            log_stream_name = api nginx_access {instance_id}
                            datetime_format = %d/%b/%Y:%H:%M:%S %z
                            time_zone = UTC

                            [nginx_error]
                            file = /var/log/nginx/error.log
                            log_group_name = ${EonDataWebLogGroup}
                            log_stream_name = api nginx_error {instance_id}
                            datetime_format = %Y/%m/%d %H:%M:%S
                            time_zone = UTC
                    /etc/systemd/system/eondata-api.socket:
                        mode: "000400"
                        content: !Sub |
                            [Unit]
                            Description=Eon Data API socket

                            [Socket]
                            ListenStream=/run/eondata/api.socket
                            SocketUser=eondata
                            SocketGroup=eondata
                            SocketMode=0660
                            DirectoryMode=0775

                            [Install]
                            WantedBy=sockets.target nginx.service
                    /etc/systemd/system/eondata-api.service:
                        mode: "000400"
                        content: !Sub |
                            [Unit]
                            Description=EonData API
                            After=network.target eondata-api.socket
                            Requires=eondata-api.socket

                            [Service]
                            WorkingDirectory=/home/eondata/webapi
                            ExecStart=/usr/bin/dotnet /home/eondata/webapi/EonData.Api.dll
                            SyslogIdentifier=eondata-api
                            User=eondata
                            Group=eondata
                            Environment=ASPNETCORE_ENVIRONMENT=Production
                            Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false
                            Type=notify
                            Restart=always
                            RestartSec=10

                            [Install]
                            WantedBy=multi-user.target
                    /etc/systemd/system/eondata-api-update.service:
                        mode: "000400"
                        content: !Sub |
                            [Unit]
                            Description=EonData API automatic update
                            Wants=eondata-api.service

                            [Service]
                            Type=oneshot
                            SyslogIdentifier=eondata-api-update
                            ExecStart=/bin/bash /root/apiUpdate.sh
                    /etc/systemd/system/eondata-api-update.timer:
                        mode: "000400"
                        content: !Sub |
                            [Unit]
                            Description=Timer for EonData API automatic update

                            [Timer]
                            OnBootSec=1min
                            OnUnitActiveSec=1min
                            Unit=eondata-api-update.service

                            [Install]
                            WantedBy=timers.target
                    /root/finalServices.sh:
                        mode: "000700"
                        content: !Sub |
                            #!/bin/bash
                            systemctl daemon-reload

                            # enable the services and sockets used by the api and the update script
                            systemctl enable eondata-api.service
                            systemctl enable eondata-api-update.service
                            systemctl enable eondata-api.socket

                            # run the update service to deploy the web api
                            systemctl start eondata-api-update.service

                            # start the automatic update service timer
                            systemctl enable eondata-api-update.timer
                            systemctl start eondata-api-update.timer
                    /root/apiUpdate.sh:
                        mode: "000700"
                        content: !Sub |
                            #!/bin/bash
                            TARGET_DIR="/home/eondata/webapi"
                            SYNC_COMMAND="aws s3 sync s3://${EonDataWebDataBucketName}/bin/api/ $TARGET_DIR --delete --exact-timestamps"

                            show_message() {
                                echo "$(date +'%Y-%m-%d %H:%M:%S') $@"
                            }

                            SYNC_NEEDED=$($SYNC_COMMAND --dryrun)

                            if [ -n "$SYNC_NEEDED" ]
                            then
                                if [ -d "$TARGET_DIR" ]
                                then
                                    show_message "updating web api..."
                                    systemctl stop eondata-api.socket
                                    systemctl stop eondata-api.service
                                else
                                    show_message "deploying web api..."
                                fi

                                $SYNC_COMMAND

                                chown -R eondata:eondata $TARGET_DIR

                                systemctl start eondata-api.socket

                                show_message "done."
                            else
                                show_message "no changes."
                            fi
                    /root/r53update.sh:
                        mode: "000500"
                        content: !Sub |
                            #!/bin/bash
                            PUB_IP=$( curl http://169.254.169.254/latest/meta-data/public-ipv4 )
                            JQ_SET_IP=".ChangeBatch.Changes[0].ResourceRecordSet.ResourceRecords[0].Value=\"$PUB_IP\""
                            R53_JSON=$( cat /root/r53set.json | jq -cr $JQ_SET_IP )
                            aws route53 change-resource-record-sets --cli-input-json "$R53_JSON"
                            R53_HOSTNAME=$( cat /root/r53set.json | jq -r .ChangeBatch.Changes[0].ResourceRecordSet.Name )
                            hostnamectl set-hostname "$R53_HOSTNAME"
                            hostname "$R53_HOSTNAME"
                    /root/r53set.json:
                        mode: "000400"
                        content: !Sub |
                            {
                                "HostedZoneId": "${DnsHostedZoneId}",
                                "ChangeBatch": {
                                    "Comment": "Set eondata eondata api DNS name to the current public IP of the EC2 instance.",
                                    "Changes": [{
                                    "Action": "UPSERT",
                                    "ResourceRecordSet": {
                                        "Name": "eondata-api.aws.eondata.net",
                                        "Type": "A",
                                        "TTL": 30,
                                        "ResourceRecords": [ { "Value": "127.0.0.1" } ]
                                    }
                                    }]
                                }
                            }
                    /root/initLogs.sh:
                        mode: "000700"
                        content: !Sub |
                            #!/bin/bash
                            echo "LogLevel VERBOSE" >> /etc/ssh/sshd_config
                            systemctl restart sshd
                            systemctl enable awslogsd
                            systemctl start awslogsd
                  commands:
                    awslogsinit:
                        command: /root/initLogs.sh
                    awsrt53set:
                        command: '/root/r53update.sh'
                    eondatacreatehome:
                        command: mkdir -m 0700 /home/eondata
                    eondatasetowner:
                        command: chown eondata:eondata /home/eondata
                    msrepoadd:
                        command: rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
                inst:
                  # install and configure services
                  packages:
                    yum:
                      aspnetcore-runtime-7.0: []
                  commands:
                    instwebsvr:
                      command: amazon-linux-extras install -y nginx1
                cfgs:
                  # finalize configurations
                  files:
                    /etc/nginx/conf.d/eondata-api.conf:
                        mode: "000640"
                        content: !Sub |
                            server {
                                listen 80;
                                server_name api.eondata.net;

                                location / {
                                    return 301 https://www.eondata.net/;
                                }

                                location /api/ {
                                    proxy_pass http://apisock/;
                                    proxy_set_header Origin $http_origin;
                                }
                            }

                            upstream apisock {
                                server unix:/run/eondata/api.socket;
                            }
                    /usr/share/nginx/html/index.html:
                        owner: root
                        group: root
                        mode: "000644"
                        content: !Sub |
                            <!DOCTYPE html>
                            <html lang="en">
                            <head>
                                <meta charset="UTF-8">
                                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                <title>Redirecting...</title>
                                <!-- Redirect using the meta refresh tag -->
                                <meta http-equiv="refresh" content="0;url=https://www.eondata.net">
                                <script>
                                    // Redirect using JavaScript as a fallback in case the meta refresh tag is disabled or not supported
                                    document.addEventListener("DOMContentLoaded", function() {
                                        window.location.href = "https://www.eondata.net";
                                    });
                                </script>
                            </head>
                            <body>
                                <p>Redirecting to <a href="https://www.eondata.net">www.eondata.net</a>...</p>
                            </body>
                            </html>
                  commands:
                    addnginxtogrp:
                      command: usermod --append --groups eondata nginx
                    # start aspnet core web api
                    sysdfinalize:
                      command: /root/finalServices.sh
                    # restart web server to finish the startup process
                    websrvrestart:
                      command: systemctl restart nginx
    EonDataApiHostEC2AutoScale:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            AutoScalingGroupName: EonDataApiHostAutoScaling
            DesiredCapacity: 1
            MinSize: 0
            MaxSize: 1
            Cooldown: 90
            VPCZoneIdentifier: !Ref WebHostSubnets
            LaunchTemplate:
                LaunchTemplateId: !Ref EonDataApiHostLaunchTemplate
                Version: 1
    EonDataWebApiCloudFrontRequests:
        Type: AWS::CloudFront::OriginRequestPolicy
        Properties:
            OriginRequestPolicyConfig:
                Name: EonDataWebApiCloudFrontRequests
                CookiesConfig:
                    CookieBehavior: none
                HeadersConfig:
                    HeaderBehavior: whitelist
                    Headers:
                         - Origin
                         - Referer
                         - Accept
                         - Accept-Language
                         - Content-Type
                         - Access-Control-Request-Method
                         - Access-Control-Request-Headers
                QueryStringsConfig:
                    QueryStringBehavior: all
    EonDatWebApiCloudFrontCaching:
        Type: AWS::CloudFront::CachePolicy
        Properties:
            CachePolicyConfig:
                Name: EonDatWebApiCloudFrontCaching
                DefaultTTL: 60
                MaxTTL: 86400
                MinTTL: 0
                ParametersInCacheKeyAndForwardedToOrigin:
                    CookiesConfig:
                        CookieBehavior: none
                    HeadersConfig:
                        HeaderBehavior: whitelist
                        Headers:
                            - Accept
                            - Accept-Language
                    QueryStringsConfig:
                        QueryStringBehavior: all
                    EnableAcceptEncodingGzip: true
    EonDataWebApiCloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Enabled: true
                Comment: EonData web api distribution
                HttpVersion: http2
                Aliases:
                    - api.eondata.net
                ViewerCertificate:
                    AcmCertificateArn: !Ref EonDataWebApiCertArn
                    SslSupportMethod: sni-only
                    MinimumProtocolVersion: TLSv1.2_2021
                Origins:
                    - Id: EonDataApiEC2Origin
                      DomainName: eondata-api.aws.eondata.net
                      CustomOriginConfig:
                        OriginProtocolPolicy: http-only
                        OriginReadTimeout: 30
                        OriginKeepaliveTimeout: 5
                    - Id: EonDataWebAppS3Origin
                      DomainName: !Sub ${EonDataWebAppBucketName}.s3.amazonaws.com
                      S3OriginConfig:
                        OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${EonDataWebOriginAccess}
                DefaultCacheBehavior:
                    TargetOriginId: EonDataApiEC2Origin
                    ViewerProtocolPolicy: redirect-to-https
                    CachePolicyId: !Ref EonDatWebApiCloudFrontCaching
                    OriginRequestPolicyId: !Ref EonDataWebApiCloudFrontRequests
                    AllowedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                        - PUT
                        - PATCH
                        - POST
                        - DELETE
                Logging:
                    Bucket: !Sub ${EonDataWebDataBucketName}.s3.amazonaws.com
                    Prefix: logs/webapi/cf/
                    IncludeCookies: false
    EonDataApiHostIAMRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: EonDataApiHostIAMRole
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Principal:
                    Service:
                      - ec2.amazonaws.com
                  Action:
                    - sts:AssumeRole
            Path: "/"
    EonDataApiIAMPolicyS3Access:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: EonDataApiIAMPolicyS3Access
            Roles:
                - !Ref EonDataApiHostIAMRole
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Sid: EonDataApiS3Read
                      Effect: Allow
                      Action:
                        - s3:GetObject
                      Resource:
                        - !Sub arn:aws:s3:::${EonDataWebDataBucketName}/bin/api/*
                        - !Sub arn:aws:s3:::${EonDataWebDataBucketName}/contacts/*
                    - Sid: EonDataApiS3List
                      Effect: Allow
                      Action:
                        - s3:ListBucket
                      Resource:
                        - !Sub arn:aws:s3:::${EonDataWebDataBucketName}*
                    - Sid: EonDataApiS3Write
                      Effect: Allow
                      Action:
                        - s3:PutObject
                      Resource:
                        - !Sub arn:aws:s3:::${EonDataWebDataBucketName}/contacts/*
    EonDataWebIAMPolicyWriteLogs:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: EonDataWebIAMPolicyWriteLogs
            Roles:
                - !Ref EonDataApiHostIAMRole
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Sid: EonDataWebIAMPolicyWriteLogs
                      Effect: Allow
                      Action:
                        - logs:CreateLogGroup
                        - logs:CreateLogStream
                        - logs:PutLogEvents
                      Resource:
                        - !Sub arn:aws:logs:*:*:log-group:${EonDataWebLogGroup}:*
                    - Sid: EonDataWebIAMPolicyLogGroups
                      Effect: Allow
                      Action:
                        - logs:DescribeLogGroups
                      Resource:
                        - arn:aws:logs:*:*:*
    EonDataWebIAMPolicyRt53:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: EonDataWebIAMPolicyRt53
            Roles:
                - !Ref EonDataApiHostIAMRole
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Sid: EonDataWebIAMPolicyRt53
                      Effect: Allow
                      Action:
                        - route53:ChangeResourceRecordSets
                      Resource:
                        - !Sub 'arn:aws:route53:::hostedzone/${DnsHostedZoneId}'
    EonDataApiHostIAMProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            InstanceProfileName: EonDataApiHostIAMProfile
            Roles:
              - !Ref EonDataApiHostIAMRole