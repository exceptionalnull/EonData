Description: Creates the EonData.net website
Parameters:
    HostKeyPair:
        Description: The EC2 KeyPair to use when creating the bastion host instances.
        Type: AWS::EC2::KeyPair::KeyName
        Default: eondata-web
    EonDataWebAppBucketName:
        Description: Name of the S3 bucket that will host the angular webapp.
        Type: String
        Default: eondataweb
    EonDataWebDataBucketName:
        Description: Name of the S3 bucket that stores data used by the website.
        Type: String
        Default: eondataweb-data
    BastionSecurityGroupId:
        Description: The security group id the bastion host belongs to.
        Type: String
    TargetVPC:
        Description: VPC to launch the bastion host in.
        Type: AWS::EC2::VPC::Id
    WebHostInstanceType:
        Description: The EC2 instance type to use when creating the bastion host.
        Type: String
        Default: t4g.small
    WebHostSubnets:
        Description: The subnets to deploy the web host instances to. These should be private subnets.
        Type: List<AWS::EC2::Subnet::Id>
    # get the latest amazon linux 2 ami id
    LatestAmiId:
        Description: This is the latest Amazon Linux 2 AMI which will be used for the EC2 instances.
        Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
        Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
    EonDataWebAppS3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Ref EonDataWebAppBucketName
            AccessControl: PublicRead
            WebsiteConfiguration:
                IndexDocument: index.html
                ErrorDocument: index.html
    EonDataWebAppS3Policy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref EonDataWebAppS3Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Sid: "PublicReadGetObject"
                      Effect: "Allow"
                      Principal: "*"
                      Action: "s3:GetObject"
                      Resource: !Join ["", ["arn:aws:s3:::", !Ref EonDataWebAppBucketName, "/*"]]
    EonDataWebDataS3Bucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketName: !Ref EonDataWebDataBucketName
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
    # TODO: migrate eondata.net domain to Route53 to improve deployment of root domain resources. especially ACM certs like the two below.
    # NOTE: for now when first deploying this template it will not complete until the CNAME validation is completed manually in google domains.
    EonDataWebAppCert:
        Type: AWS::CertificateManager::Certificate
        Properties:
            DomainName: eondata.net
            SubjectAlternativeNames:
                - www.eondata.net
            ValidationMethod: DNS
            DomainValidationOptions:
                - DomainName: eondata.net
                  ValidationDomain: eondata.net
                - DomainName: www.eondata.net
                  ValidationDomain: eondata.net
    EonDataWebApiCert:
        Type: AWS::CertificateManager::Certificate
        Properties:
            DomainName: api.eondata.net
            ValidationMethod: DNS
            DomainValidationOptions:
                - DomainName: api.eondata.net
                  ValidationDomain: eondata.net
    # EonDataWebAppCloudFront:
    #     Type: AWS::CloudFront::Distribution
    #     Properties:
    #         DistributionConfig:
                
    # EonDataWebHostEC2Security:
    #     Type: AWS::EC2::SecurityGroup
    #     Properties:
    #       GroupName: EonDreamWebServerSecurityGroup
    #       GroupDescription: Controls access to the eondream website web ec2 servers.
    #       VpcId: !Ref TargetVPC
    # EonDataWebHostAllowSSH:
    #     Type: AWS::EC2::SecurityGroupIngress
    #     GroupId: !GetAtt EonDataWebHostEC2Security.GroupId